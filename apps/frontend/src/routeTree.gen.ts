/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedHomeIndexImport } from './routes/_authenticated/home/index'
import { Route as AuthenticatedUsersUserIdIndexImport } from './routes/_authenticated/users/$userId/index'
import { Route as AuthenticatedUsersIndexImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedUsersRegisterImport } from './routes/_authenticated/users/register'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/users/index.lazy').then((d) => d.Route))

const AuthenticatedHomeIndexRoute = AuthenticatedHomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/home/index.lazy').then((d) => d.Route))

const AuthenticatedUsersRegisterRoute = AuthenticatedUsersRegisterImport.update({
  id: '/users/register',
  path: '/users/register',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/users/register.lazy').then((d) => d.Route))

const AuthenticatedUsersUserIdIndexRoute = AuthenticatedUsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/users/$userId/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/users/register': {
      id: '/_authenticated/users/register'
      path: '/users/register'
      fullPath: '/users/register'
      preLoaderRoute: typeof AuthenticatedUsersRegisterImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/home/': {
      id: '/_authenticated/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthenticatedHomeIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/$userId/': {
      id: '/_authenticated/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedUsersRegisterRoute: typeof AuthenticatedUsersRegisterRoute
  AuthenticatedHomeIndexRoute: typeof AuthenticatedHomeIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
  AuthenticatedUsersUserIdIndexRoute: typeof AuthenticatedUsersUserIdIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedUsersRegisterRoute: AuthenticatedUsersRegisterRoute,
  AuthenticatedHomeIndexRoute: AuthenticatedHomeIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
  AuthenticatedUsersUserIdIndexRoute: AuthenticatedUsersUserIdIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(AuthenticatedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/users/register': typeof AuthenticatedUsersRegisterRoute
  '/home': typeof AuthenticatedHomeIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/users/register': typeof AuthenticatedUsersRegisterRoute
  '/home': typeof AuthenticatedHomeIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/users/register': typeof AuthenticatedUsersRegisterRoute
  '/_authenticated/home/': typeof AuthenticatedHomeIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/_authenticated/users/$userId/': typeof AuthenticatedUsersUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/users/register' | '/home' | '/users' | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/users/register' | '/home' | '/users' | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/users/register'
    | '/_authenticated/home/'
    | '/_authenticated/users/'
    | '/_authenticated/users/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/users/register",
        "/_authenticated/home/",
        "/_authenticated/users/",
        "/_authenticated/users/$userId/"
      ]
    },
    "/_authenticated/users/register": {
      "filePath": "_authenticated/users/register.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/home/": {
      "filePath": "_authenticated/home/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/$userId/": {
      "filePath": "_authenticated/users/$userId/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
